
#include <iostream>
#include <algorithm>
#include <numeric>
#include <math.h>
// https://stackoverflow.com/questions/18439520/is-there-a-128-bit-integer-in-c
// #include <boost/multiprecision/cpp_int.hpp>
using namespace std;

// ./factorize 576460752303423484 576460752303423489
//https://www.alpertron.com.ar/ECM.HTM
//https://en.wikipedia.org/wiki/Miller%E2%80%93Rabin_primality_test#Deterministic_variants

// https://cp-algorithms.com/algebra/factorization.html
// quadratic seive
// https://www.mersenneforum.org/showthread.php?t=23177

unsigned long long PRIME_FLAGS[] = {0x3b6996932ca45b40,0x26192930d820b4c2,0x4996102d02434892,0x114430ca45a08a29,0x6012126424c9608,0x6930522110892894,0x5021061b08168168,0x28845240a489053,0xc861900b4912400,0x4221244149904201,0x265a0c8000491008,0x40b48b2086d20822,0x948a2814d321004,0x300161061124804b,0x420880812d84124,0x301801225a24308,0x10906c20c0658440,0x20029101a2034494,0x1801329025948248,0x1482250008042299,0x20c04504086892,0x522c861140841960,0x2052250088491082,0x526000c22814412,0xa4010c04002c128,0x245100360800324a,0x60a0c30180900404,0x5b0022090d321821,0x4094892020d0251,0x892004c20520184,0xb08144029a60a00,0x10693200640483,0x2080d20580400426,0x186130c244000861,0x121009041804a480,0x61025a0030480892,0x101a64848208065,0x8800b4c1408001,0x904090834890d02,0x4a61808220148324,0x240a2110402d0,0x104c04902102800,0x1248960964009a01,0x20ca001251080008,0xcb6102510900590,0x28849120a6530c,0x48028204001200a,0x112902486104430,0x821001a25100849,0x10830924484c9211,0x12006014420004,0x402c265008820101,0x3048619081400603,0xc200b4404982022,0x100030ca48941220,0x20410800904c0088,0x4240b2112900020,0x4304301804004024,0x4026014c2212453,0xc149828100a4014,0x4a28128105800140,0x49041025a012089,0x4182000406400812,0x104d109200204a20,0x430d200940b409,0x400424430002982,0x120001044868021,0x101840b048091452,0x2482524402802830,0x1841a00900025108,0x26000cb010642200,0x20900940941120a4,0x120c040161008a05,0x10024092130d801a,0x4824084122800020,0x412982410184400c,0x12900c1282241482,0x6082812026110090,0xc001801308328,0x1308a450402080,0x2922c04184434810,0x4008800340168108,0x3040600088011490,0x28824a00a0182520,0x4021108000909320,0x2609000611012242,0x20086182900582,0x10c340101000a25,0x4882094400c0408,0x4820812802826480,0x801800225005040,0x401443018208000,0x6904912c800a0084,0x1029304861200a00,0x16400c0053480091,0x6000122020c30914,0x4100240a00160845,0x105024048a489083,0x2404490432014920,0x44844028120108,0x41904100005229a,0x104892806c00524,0x800129048028a24,0x2000610442200241,0x40a6000810182500,0x4249108204204040,0x4090122404010cb,0x41864009a0110880,0x1840205a01a44300,0x280018601402408,0x6802000094814010,0x100260004108068,0x120040304a2890c1,0x84080814996000,0x4001348141020205,0x225248a281011282,0x20308a4002422904,0x800140801105221,0x2042610410248042,0x4402990c22486010,0x4148841020a21240,0x1408081088418048,0x2106c128a00000b6,0x1049029244800020,0x14c124a040083008,0x48004005b40a4880,0x300000b40049805,0x240010081210641,0x25240b0014900,0x84024490002820c,0x65040328004120a,0x200209820008a4,0x1804a48020324021,0x3449001012212040,0x880982c00880400,0x320149108804b44,0x608240292641080,0x20805301840a0006,0x1060024044304009,0x80218208042098,0x6420182530010006,0x430104400cb09004,0x10882494034100c1,0x2c041040a2014102,0x4a25004108160304,0xa400401001088,0x2104820910102520,0x802100020d800,0x2081200450090201,0x4c80004030120180,0xb20904224041108,0x100001328205b448,0x4992412002184824,0x124000001004861,0x10820ca040441200,0x6112006004884106,0x120d021900a08804,0x125240b041480402,0xc04110084002912,0x5840148a00860001,0x2003041098200048,0x2020c00804102182,0xb4830100c000044,0x48868044220a018,0x436880032004120,0x402912422c021200,0x1120005a012000,0x68948204000204b2,0x164001a4430c340,0xc1042010408609,0x9020a0500c22884,0x1008044804040921,0x29820a483018250,0x2582014000100820,0x5a20a0000900c109,0x400449010601080,0x21900b00001301a2,0x108261148308044,0x200a400013090012,0x404806100422530,0x4168848201020808,0x1011640200201083,0x4084920106000804,0x808204004100261,0x168104a40b400099,0xc000801a4490104,0x122c004148921904,0x10250448290241,0x9224b4414080430,0x1200908a00040001,0x44008320809300a,0x14402110902802,0x40208800209224,0x1001010281048410,0x4a20104021a0084,0xa6100100d004040,0x409480242609000,0x21129100001b0402,0x1109008060808949,0x2050040690,0x64104a0424810810,0x1120a2004c02004c,0x240408483288041,0x1a0510410002022,0x4801044249024021,0x61a001411402210,0x2024884890420084,0x5040020141009000,0x24480106930d2640,0x804804110484180,0x430804802c801240,0x240820325020b008,0x800020902000c12,0x960200044004800,0x10c02904400c8010,0xc30800180024080,0x1004065000169829,0x20ca44a00a000211,0x1801a4480814022,0x24104861820008,0x201804221000001a,0x4430800180002426,0x148808101205005,0x3083209283282459,0x84882400c82014,0x940120228801104,0x101040200045a400,0x2810010026424092,0x84c108220100848,0x9220200b0c2091,0x21004201000a4000,0x5120820144009820,0x120104c0010202,0x5020a4c00014802,0x800900301008208,0x649481600441212,0x20804121801024a0,0x1200801820028040,0x3003411042058040,0x40000924109044a4,0x80012110024410c,0x3218410080251002,0x4800120482090c20,0x6022c805940028,0x10d22900020c9401,0x22d00000000114,0x400d021a00908048,0x20244a0082006c1,0x806004804000c20,0x4220200000121108,0x2403002691242018,0x180810982100502,0x5000069068104a65,0x4309060020824a,0x34006522026104,0x900009025800100,0x22916000ca001008,0x1901301060a4810,0x110500c220248001,0x40308a208008000,0xc109060b4804082,0x5020005108908045,0x2024530c1691480,0x80084402190d00,0x1060300248805008,0x22500480010020c8,0x500000002c12182,0x800340801324205,0x4884084c1002011,0x804182830c80490,0x9829008060248,0x108044221a010008,0x2006c00920404802,0x1060100000a00321,0x642290411482000,0x4012002420c20092,0x20420104482810c,0x100020304b480050,0xd20400000090000,0x60248200164009,0x209080608210082,0x44848b4010012420,0x4300240840028044,0x1042091012248018,0x4010900000402434,0x14002c108a20a08,0x11210092241440,0x2104832c04104084,0x908304a60a00120,0x1213008450008401,0x2020082110c04802,0x1005000344060164,0x2010408048080251,0x29044304b2180820,0x4244800320100020,0x18083008091088,0x4420000092802d02,0x8901020004800,0x1408491402098010,0x4482814d00802404,0x80d300001000,0x814c0042601083,0x190122c24430080,0x820104821240208,0x1610048240400280,0x68000844a4812016,0x10884434c200001,0x105201808b081042,0xa2100002984010,0x241000828800228,0x9089010442088,0x130c84912810004,0x4040229005009800,0x92082c00c2441,0x4010094100124000,0x8940020000b40,0x208292208608080,0x4890402180000016,0x1000208a20204129,0x4d020a048009210,0x41004024808a4014,0x5021904069061,0x12c2049040200011,0x900130830002102,0x82024c029000205,0x265204a210480008,0x4400c24004500026,0x808948808125841,0x816802010c2410,0x220104325041a0,0x40061220224108,0x12092c005225a40a,0x2100100106410020,0x64021245908848,0x902500110c1280,0x30024484482102,0x1201060a00108101,0x88041048081001,0x822004c20000000,0x1a20204240048201,0x180016090d0240,0x6110020094000480,0x5b44000001020060,0x401088650290053,0x412080c108a6000,0x221068100044b4c,0x1000000090219000,0x4000500022520834,0x1020220005844a40,0x283080410403411,0x4200a2020890110,0x204a20a00900001,0x10120000ca600403,0x900004082804502,0x1845804041021024,0x42480211050,0x4030810084022502,0x4200040928200005,0x2441090090000009,0x4822100012006104,0x328001124021a08,0x2110010c8013008,0x4180010082000ca4,0x904228200108901,0x40204a4080ca080,0x28029060000a6180,0x1121041008100100,0x50040042600090,0x8a44b0400100810,0x102010894910020c,0x2013008608402000,0x2524490802410884,0x90816004030d005,0x6090c2012041,0x400890122824500,0x4900400482010c,0x2001202250010088,0x2084020c00504020,0x10d00104084ca40,0x293002201402280,0xc10580000030094,0x320845800861824,0x200002401018242,0xd20410400916020,0x106404ca08001101,0x420032002c00c0,0x6414022814020026,0x4308000121024800,0x304040808321000b,0x4a0882100902000,0x486810000c801840,0x301109108a602480,0x40008128001840a0,0x845100a04a00248,0x403000048408298,0x12c800200a0082,0x20201040941000,0x1048442403010240,0x906014400082830,0x100340904005,0x20410c0480280200,0x41b0400800932984,0x104c808940208205,0x48900908204a200,0x4c00100c02120430,0x121801224041100,0x3408041200243040,0x804802420590400,0x105220061044000,0x642280000401400,0x4109041844a2800,0x4028800240241849,0x210408009401003,0xa4180804092910,0xa04000a0110d105,0x4030430114000c8,0x30c02102800480,0x5004a20141000800,0x20080180400d0649,0x4814004120182000,0x148801208045004,0x2601282088002443,0x10420022100412,0x828104004000201,0x109008a20204a400,0x6530124010016814,0x320a05804049808,0x248001448008092,0x2080014020114002,0x1801108128044100,0x650480091080202,0x2000496102420002,0x40368801100820,0xc0410081080412,0x2102430c801a4,0x4240941000200248,0x169124008045804b,0x100802124000c10,0x49304220100a20,0x10c001840b000208,0x100084484404092,0x1025841908b08004,0x98201400288481,0xc02420092800d12,0x204040341864109,0x2009480001482050,0x4420822902120c20,0x1804221828100060,0x3009091010200042,0x90800c00182024,0x4000145020844148,0x24080112c2401089,0x20040301200a0014,0x801028245240021,0x402c060148a419,0x2000800014404002,0x420c22420c300140,0x80049009200610,0x800500892080910,0x1220300000800000,0x453440480282090,0x61900309121024a0,0x110880810c304a00,0x440000011098442,0x4886006902c00414,0x20148100025300,0x229801220240a402,0x2090400400080880,0x44009021008141,0x140001261a009210,0x4c00004480026080,0x5001024840108101,0x202440001410482,0x104a4890c30,0x840808940161204,0x2100002100c305a,0x484400004802822,0x400022004410c040,0x2088011002240,0x32812030024400,0x4009829028800a4c,0x80250292242448,0x812400900100012,0x120108800100901,0x483282240089408,0x4020086580020184,0x1204000040068828,0x280008040480002,0x2520520012102010,0x1204248120028100,0x2208441008402200,0x2114004804c20006,0x1b00001800224804,0x40a010002018200,0x480014020d02424,0x4841904300a00a40,0x12004910080430ca,0x4100c22806490884,0x41104a4080c148,0x1240401000401,0x9205000a0420102,0xd020300048900,0x8a018089000011,0xa0004830002420,0x4000040860845124,0x1a081011000202,0x184024000500982,0x100c840804001220,0x340108804308a412,0xb2802100080430,0x901028005021040,0x12810c00080400c0,0x68920320844140a4,0x108325860004041,0x4029a202040200,0x4c00920184000114,0x28240b00040045,0x2080010080008011,0x4a0c14802100,0x44a00221025104,0x602440410210002,0x504412182000904,0x1004308124000a20,0x3081400201042450,0x4800804430504130,0x36080810c040200,0x290040088613409,0x14520822420886,0x1048208020008021,0x21109a049048210,0x21020221000b2814,0x224000804120808,0x20c00120420000d2,0x2080100c00080400,0x2010800012c005,0x2612042280081010,0x2004802102820c04,0x4900a40801300000,0xc2691080202000,0x4422180012400010,0x80982000d201048,0x680000050050002,0x29060028804a4436,0x201000040008,0x11010241000600,0x6820004134086010,0x208061008000964,0x2008212080209603,0x120580c80914400,0x44144800801304,0x90826004c1200,0x4410030900832080,0x4a00801104004040,0x400080650218210,0x4c04190430982080,0x21044000840a44,0x2008040050458009,0x10d324a0030832,0x112100ca00800841,0x240050000408088,0x122c80100404100,0x410124120c821101,0x120220a480208290,0x506190002004d00,0x21b00301908024,0x50408280001080,0x130414800102880,0x400014802c10c841,0x2089200280010048,0x2182512822414,0x140105201a01808,0x2000491000011000,0x120201020900a0,0x864220005040120,0x1200012402442091,0xd00122004c12104,0x902080002800c,0x2212042000288410,0x805200a0090130,0x2090c841164208,0x40089409200052,0x580032004500804,0x304a00849021060,0x1000082258602,0xc22010012820514,0xa48025100800000,0x341140000a001001,0x104c104064a0810,0x1104020244240841,0x680090000080088,0x4930502480026104,0x1200a40b04208009,0x1250010401010200,0x402500082996000,0x80000c228024021,0x2000009008253002,0x4080010800c22020,0x1804008849028805,0x40201280080602,0x4804010100502500,0x402190800c200248,0x90600082049048,0x1041100005040a0,0x841001a41b08200,0x1202288448000608,0x800986014480992,0x502802500482004c,0x20ca20a041081410,0x840a0012000500,0x44808840844200,0x100406012920c2,0x14402012012900,0x1200800040021800,0x2088419003040648,0x4080802500002424,0x4040000329240808,0x14010d1008410000,0x61000008a0080080,0x80122c801244001,0x40204a011081411,0x8205820a4020004,0x100002410c021045,0x12c004100b600000,0x104400434906812,0x4041a00028009221,0x10082009000280,0x134094080c10c82,0x848801104120240,0x20080100c00c0600,0x40840108000a2130,0x241968104004304,0x6902420c0408000,0x4192500420010416,0x86c009205008200,0x121101a008480000,0x6122002094830004,0x4100804800001109,0x2ca4000022110c0,0x29041a0084104500,0x804008901020300,0x64840b0002d1098,0x2024000000430422,0x940868940120801,0x2000218410240010,0x4982922006010,0x4a00845204024000,0x2006c001a012483,0x10800026084002,0x20101240800828,0x1051010040000400,0x2832c20434002080,0x30100090c848924,0x2090040000401602,0x904500c10800410,0x1804004140801004,0x2041402088412000,0x40a0024000932004,0x4a48020308821,0x1088080002258003,0x41848109244a0,0x4029061008800100,0x18052040250482,0x4084002406020006,0x1800004800204860,0x4121041004b090,0x4102080004c10912,0x200004840300064,0x100020308b010080,0x522010024014832,0xa01300208901008,0x10400619290000,0x4090030000000882,0x430000112000d024,0x4228144000a449,0xb4082010d06110,0x108041121021100,0x3200412208003000,0x105008840840a0,0x1001225100000,0x2c2088410403001,0x44008200a0c10180,0x320021800340141,0x2052040080080281,0x2420004420192032,0x5800b00109864008,0x22500c0288080052,0x2004010114800902,0x80c140868201000,0x1081001040000440,0x20814030004100,0x4860000201020a00,0x98012042002000,0x180c000225a0400,0x4412002014cb60,0x211242048080408,0x400524500424182,0x124a04040001025,0x290011401081040,0x22124814082420,0x102104c900068009,0x2202401618440000,0x4882810430484,0x200261120200a04,0x104a6880122c0402,0x4801021029a0420,0x808844004000048,0x3201680018001440,0x2082d02000080806,0x848201804900201,0x242018448080,0x812902020024110,0x420400000c06004c,0x30ca008480011250,0x22490020000d12,0x5020840168001204,0x410003488001088,0x4020880100502,0x1004b08140024000,0x10402894c0012400,0x4420012002880084,0x161020325220100,0x40901025245a0c1,0x20800320840a0000,0x90c104000a0c841,0x612212040448218,0x44108045a0012004,0x109800244000009,0x2012448403208042,0x2080010c34806802,0xa44000248008220,0x80cb48024005a,0x100480110000020,0x1808020060020060,0x20020080d10c2051,0xa2810c00404480,0x2194000c040004,0x21001104020304a,0x980020180124c80,0x120004061a0c108,0x1211000600009010,0x2802002514022814,0x4004040a00101840,0x4a4120000882d1,0x2802084004182120,0x4805248800908200,0x40844121060128a,0x200a2104410120,0x5140200000125224,0x2001098612000041,0x4420092402182030,0x4140021200804000,0x411083008218400,0x2904500026404004,0x40208225108940,0x1080050013040000,0x2012800480026112,0x4221801a00a40001,0x280200481211681,0x80004400810800,0x1864200100840200,0x20180080000d3210,0x90412800030820,0x34426800d000060,0x408008040000243,0x10106c308a0000,0xa08049020064004,0x400401002408000,0x2000912002410006,0x168020044300a21,0x212248202081080,0x6100100120c00900,0x400d06400012004c,0x104034096180c2,0x2420104814804100,0xa40908361001108,0x8442601040010,0x300a4094400880,0x10084002c008a25,0xa080201208403,0x4c10004802404494,0x20940120240004};
const long long PRIME_START_NUM = 99960;

const long long MAX_NUM = 9223372036854775807;
const long long MIN_NUM = 2;
const int MAX_FACTORS = 64;

long long factors[MAX_FACTORS] = {1, 2, 3, 4, 5};
int num_factors = 5;
long long brent(long long);




// https://github.com/delta003/lenstra_algorithm/blob/master/
// https://iq.opengenus.org/integer-factorization-algorithms/
// https://lemire.me/blog/2013/12/26/fastest-way-to-compute-the-greatest-common-divisor/




// https://en.wikipedia.org/wiki/Lenstra_elliptic-curve_factorization
const int LENSTRA_NUM_PRIMES = 1229;
const int LENSTRA_PRIMES[LENSTRA_NUM_PRIMES] = \
    {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671, 3673, 3677, 3691, 3697, 3701, 3709, 3719, 3727, 3733, 3739, 3761, 3767, 3769, 3779, 3793, 3797, 3803, 3821, 3823, 3833, 3847, 3851, 3853, 3863, 3877, 3881, 3889, 3907, 3911, 3917, 3919, 3923, 3929, 3931, 3943, 3947, 3967, 3989, 4001, 4003, 4007, 4013, 4019, 4021, 4027, 4049, 4051, 4057, 4073, 4079, 4091, 4093, 4099, 4111, 4127, 4129, 4133, 4139, 4153, 4157, 4159, 4177, 4201, 4211, 4217, 4219, 4229, 4231, 4241, 4243, 4253, 4259, 4261, 4271, 4273, 4283, 4289, 4297, 4327, 4337, 4339, 4349, 4357, 4363, 4373, 4391, 4397, 4409, 4421, 4423, 4441, 4447, 4451, 4457, 4463, 4481, 4483, 4493, 4507, 4513, 4517, 4519, 4523, 4547, 4549, 4561, 4567, 4583, 4591, 4597, 4603, 4621, 4637, 4639, 4643, 4649, 4651, 4657, 4663, 4673, 4679, 4691, 4703, 4721, 4723, 4729, 4733, 4751, 4759, 4783, 4787, 4789, 4793, 4799, 4801, 4813, 4817, 4831, 4861, 4871, 4877, 4889, 4903, 4909, 4919, 4931, 4933, 4937, 4943, 4951, 4957, 4967, 4969, 4973, 4987, 4993, 4999, 5003, 5009, 5011, 5021, 5023, 5039, 5051, 5059, 5077, 5081, 5087, 5099, 5101, 5107, 5113, 5119, 5147, 5153, 5167, 5171, 5179, 5189, 5197, 5209, 5227, 5231, 5233, 5237, 5261, 5273, 5279, 5281, 5297, 5303, 5309, 5323, 5333, 5347, 5351, 5381, 5387, 5393, 5399, 5407, 5413, 5417, 5419, 5431, 5437, 5441, 5443, 5449, 5471, 5477, 5479, 5483, 5501, 5503, 5507, 5519, 5521, 5527, 5531, 5557, 5563, 5569, 5573, 5581, 5591, 5623, 5639, 5641, 5647, 5651, 5653, 5657, 5659, 5669, 5683, 5689, 5693, 5701, 5711, 5717, 5737, 5741, 5743, 5749, 5779, 5783, 5791, 5801, 5807, 5813, 5821, 5827, 5839, 5843, 5849, 5851, 5857, 5861, 5867, 5869, 5879, 5881, 5897, 5903, 5923, 5927, 5939, 5953, 5981, 5987, 6007, 6011, 6029, 6037, 6043, 6047, 6053, 6067, 6073, 6079, 6089, 6091, 6101, 6113, 6121, 6131, 6133, 6143, 6151, 6163, 6173, 6197, 6199, 6203, 6211, 6217, 6221, 6229, 6247, 6257, 6263, 6269, 6271, 6277, 6287, 6299, 6301, 6311, 6317, 6323, 6329, 6337, 6343, 6353, 6359, 6361, 6367, 6373, 6379, 6389, 6397, 6421, 6427, 6449, 6451, 6469, 6473, 6481, 6491, 6521, 6529, 6547, 6551, 6553, 6563, 6569, 6571, 6577, 6581, 6599, 6607, 6619, 6637, 6653, 6659, 6661, 6673, 6679, 6689, 6691, 6701, 6703, 6709, 6719, 6733, 6737, 6761, 6763, 6779, 6781, 6791, 6793, 6803, 6823, 6827, 6829, 6833, 6841, 6857, 6863, 6869, 6871, 6883, 6899, 6907, 6911, 6917, 6947, 6949, 6959, 6961, 6967, 6971, 6977, 6983, 6991, 6997, 7001, 7013, 7019, 7027, 7039, 7043, 7057, 7069, 7079, 7103, 7109, 7121, 7127, 7129, 7151, 7159, 7177, 7187, 7193, 7207, 7211, 7213, 7219, 7229, 7237, 7243, 7247, 7253, 7283, 7297, 7307, 7309, 7321, 7331, 7333, 7349, 7351, 7369, 7393, 7411, 7417, 7433, 7451, 7457, 7459, 7477, 7481, 7487, 7489, 7499, 7507, 7517, 7523, 7529, 7537, 7541, 7547, 7549, 7559, 7561, 7573, 7577, 7583, 7589, 7591, 7603, 7607, 7621, 7639, 7643, 7649, 7669, 7673, 7681, 7687, 7691, 7699, 7703, 7717, 7723, 7727, 7741, 7753, 7757, 7759, 7789, 7793, 7817, 7823, 7829, 7841, 7853, 7867, 7873, 7877, 7879, 7883, 7901, 7907, 7919, 7927, 7933, 7937, 7949, 7951, 7963, 7993, 8009, 8011, 8017, 8039, 8053, 8059, 8069, 8081, 8087, 8089, 8093, 8101, 8111, 8117, 8123, 8147, 8161, 8167, 8171, 8179, 8191, 8209, 8219, 8221, 8231, 8233, 8237, 8243, 8263, 8269, 8273, 8287, 8291, 8293, 8297, 8311, 8317, 8329, 8353, 8363, 8369, 8377, 8387, 8389, 8419, 8423, 8429, 8431, 8443, 8447, 8461, 8467, 8501, 8513, 8521, 8527, 8537, 8539, 8543, 8563, 8573, 8581, 8597, 8599, 8609, 8623, 8627, 8629, 8641, 8647, 8663, 8669, 8677, 8681, 8689, 8693, 8699, 8707, 8713, 8719, 8731, 8737, 8741, 8747, 8753, 8761, 8779, 8783, 8803, 8807, 8819, 8821, 8831, 8837, 8839, 8849, 8861, 8863, 8867, 8887, 8893, 8923, 8929, 8933, 8941, 8951, 8963, 8969, 8971, 8999, 9001, 9007, 9011, 9013, 9029, 9041, 9043, 9049, 9059, 9067, 9091, 9103, 9109, 9127, 9133, 9137, 9151, 9157, 9161, 9173, 9181, 9187, 9199, 9203, 9209, 9221, 9227, 9239, 9241, 9257, 9277, 9281, 9283, 9293, 9311, 9319, 9323, 9337, 9341, 9343, 9349, 9371, 9377, 9391, 9397, 9403, 9413, 9419, 9421, 9431, 9433, 9437, 9439, 9461, 9463, 9467, 9473, 9479, 9491, 9497, 9511, 9521, 9533, 9539, 9547, 9551, 9587, 9601, 9613, 9619, 9623, 9629, 9631, 9643, 9649, 9661, 9677, 9679, 9689, 9697, 9719, 9721, 9733, 9739, 9743, 9749, 9767, 9769, 9781, 9787, 9791, 9803, 9811, 9817, 9829, 9833, 9839, 9851, 9857, 9859, 9871, 9883, 9887, 9901, 9907, 9923, 9929, 9931, 9941, 9949, 9967, 9973};

typedef struct {
    union {
        long long vec[3];
        struct {
            long long x;
            long long y;
            long long z;
        };
    };
} Point, Vec3;

#define V3(X, Y, Z) (Vec3) {.x = (X), .y = (Y), .z = (Z)}


void _modular_inv(long long a, long long b, Vec3 &res) {
    if (b == 0) res = V3(1, 0, a);
    else {
        _modular_inv(b, a % b, res);
        res = V3(res.y, res.x - a / b * res.y, res.z);
    }
}

void modular_inv(long long a, long long b, long long &i, long long &g) { // i is inverse, g is gcd
    Vec3 res;
    _modular_inv(a, b, res);
    i = res.x;
    g = res.z;
}

// # Addition in Elliptic curve modulo m space
void elliptic_add(Vec3 &p, Vec3 &q, long long a, long long b, long long m) {
    long long num, denom, inv, g;
    if (p.z == 0) return;
    if (q.z == 0) {q = p; return;}
    if (p.x == q.x) {
        if ((p.y + q.y) % m == 0) {q = V3(0,1,0); return;}
        num = (3 * p.x * p.x + a) % m;
        denom = (2 * p.y) % m;
    } else {
        num = (q.y - p.y) % m;
        denom = (q.x - p.x) % m;
    }
    modular_inv(denom, m, inv, g);
    if (g > 1) {q = V3(0, 0, denom); return;}
    long long z = (num * inv * num * inv - p.x - q.x) % m;
    q = V3(z, (num * inv * (p.x - z) - p.y) % m, 1);
}

void elliptic_mul(long long k, Vec3 &p, long long a, long long b, long long m) {
    Vec3 r = V3(0, 1, 0); // "infinity"
    while (k > 0) { // binary decomposition of k, which is the prime number
        if (p.z > 1) return;
        if (k % 2 == 1) elliptic_add(p, r, a, b, m);
        k >>= 1; // k /= 2
        elliptic_add(p, p, a, b, m);
    }
    p = r;
}


long long lenstra(long long num) { // lenstra is too low (or some implementation is wrong)
    srand(0);

    // Step 1: generate the random elliptic curve
    long long g = num; // discriminant
    Point r0;
    int a, b;
    while (g == num) {
        r0 = V3(rand() % num + 1, rand() % num + 1, 1);
        a = rand() % num + 1;
        b = (r0.y * r0.y - r0.x * r0.x * r0.x - a * r0.x) % num;
        g = gcd(4 * a * a * a + 27 * b * b, num);
        if (g > 1) {return g;} // the lucky factor
    }

    int i = 0, p = 2, pp = 2, limit = 9000;
    for (; p < limit; p = pp = LENSTRA_PRIMES[++i]) {
        while (pp < limit) {
            elliptic_mul(p, r0, a, b, num);
            if (r0.z > 1) return gcd(r0.z, num);
        }
        pp *= p;
    }
    return num;

}



// consider switching to this:
// https://cs.stackexchange.com/questions/1447/what-is-most-efficient-for-gcd
inline long long gcd(long long a, long long b) {
    if (a > b) return gcd(b, a); // reduce this check
    if (a == 0) return b;
    return gcd(b % a, a);
}

# define append_factor(factor) factors[num_factors++] = factor

// https://en.wikipedia.org/wiki/Pollard%27s_rho_algorithm
// 

// using the square root test algorithm, but optimized for less ("wheel factorization")
// #define PRIME_CHECKS_(X) X(7) X(11) X(13) X(17) X(19) X(23) X(29) 
// #define PRIME_CHECKS(X) X(1) X(7) X(11) X(13) X(17) X(19) X(23) X(29) 
/**
 * 2 = 2, only 1 check needed -> 1/2
 * 2 * 3 = 6, only 2 checks needed -> 1/3
 * 2 * 3 * 5 = 30, only 8 checks needed -> 4/15 ~0.26
 * 2 * 3 * 5 * 7 = 30, only idk checks needed -> ~0.22
 */
// long long divisor = 1;
// 1 3 5 7 9

// https://cp-algorithms.com/algebra/binary-exp.html#effective-computation-of-large-exponents-modulo-a-number
inline long long mult(long long, long long, long long);
inline long long mod_pow(long long val, long long exp, long long mod) { // O(log n)
    long long result = 1;
    val %= mod;
    while (exp > 0) {
        if (exp & 1) result = mult(result, val, mod);
        val = mult(val, val, mod);
        exp >>= 1;
    }
    return result;
}

#define PRIME_CHECKS_(X) X(11) X(13) X(17) X(19) X(23) X(29) X(31) X(37) X(41) X(43) X(47) X(53) X(59) X(61) X(67) X(71) X(73) X(79) X(83) X(89) X(97) X(101) X(103) X(107) X(109) X(113) X(121) X(127) X(131) X(137) X(139) X(143) X(149) X(151) X(157) X(163) X(167) X(169) X(173) X(179) X(181) X(187) X(191) X(193) X(197) X(199) X(209)
#define PRIME_CHECKS(X) X(1) PRIME_CHECKS_(X)
#define __CHECK_PRIME_(inc) if (inc >= num_sqrt) return true; if (num % inc == 0) return false;
#define __CHECK_PRIME(inc) if (inc >= num_sqrt) return true; if (num % (i + inc) == 0) {return false;}

/**
 * @brief Miller Primes
 * According to Wikiwiki,
 * 
if n < 2,047, it is enough to test a = 2;
if n < 1,373,653, it is enough to test a = 2 and 3;
if n < 9,080,191, it is enough to test a = 31 and 73;
if n < 25,326,001, it is enough to test a = 2, 3, and 5;
if n < 3,215,031,751, it is enough to test a = 2, 3, 5, and 7;
if n < 4,759,123,141, it is enough to test a = 2, 7, and 61;
if n < 1,122,004,669,633, it is enough to test a = 2, 13, 23, and 1662803;
if n < 2,152,302,898,747, it is enough to test a = 2, 3, 5, 7, and 11;
if n < 3,474,749,660,383, it is enough to test a = 2, 3, 5, 7, 11, and 13;
if n < 341,550,071,728,321, it is enough to test a = 2, 3, 5, 7, 11, 13, and 17.
if n < 3,825,123,056,546,413,051, it is enough to test a = 2, 3, 5, 7, 11, 13, 17, 19, and 23.
if n < 18,446,744,073,709,551,616 = 264, it is enough to test a = 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, and 37.
 * 
 */
const long long MILLER_BOUNDS[11] = {2047, 1373653, 9080191, 25326001, 3215031751, 4759123141, 1122004669633, 2152302898747, 3474749660383, 341550071728321, 3825123056546413051};
const int MILLER_NUM_BOUNDS = 11;
const int MILLER_PRIMES[12][14] = {
    {2},
    {2, 3},
    {31, 73},
    {2, 3, 5},
    {2, 3, 5, 7},
    {2, 7, 61},
    {2, 13, 23, 1662803},
    {2, 3, 5, 7, 11},
    {2, 3, 5, 7, 11, 13},
    {2, 3, 5, 7, 11, 13, 17},
    {2, 3, 5, 7, 11, 13, 17, 19, 23},
    {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37},
};
const int MILLER_NUM_PRIMES[12] = {1, 2, 2, 3, 4, 3, 4, 5, 6, 7, 9, 12};


// https://www.quora.com/What-is-the-fastest-deterministic-primality-test
inline bool is_prime(long long num) {

/**
 * @brief Square root 
 */
    // if (num == 1) return false;
    // long long num_sqrt = sqrt(num) + 1;
    // if (num == 2) return true; if (num % 2 == 0) return false;
    // if (num == 3) return true; if (num % 3 == 0) return false;
    // if (num == 5) return true; if (num % 5 == 0) return false;
    // if (num == 7) return true; if (num % 7 == 0) return false;
    // PRIME_CHECKS_(__CHECK_PRIME_)
    // for (int i = 210; i < num_sqrt; i += 210) { 
    //     PRIME_CHECKS(__CHECK_PRIME)
    // }
    // return true;   

/**
 * @brief Miller
 * https://en.wikipedia.org/wiki/Miller%E2%80%93Rabin_primality_test#Miller_test
 * https://gist.github.com/Ayrx/5884790 referenced from
 * 
 */
    
    if (num <= 2) return true;
    if (num % 2 == 0) return false;

    int miller_index = 0;
    while (miller_index < MILLER_NUM_BOUNDS && num > MILLER_BOUNDS[miller_index]) miller_index++;

    int s = 0;
    long long d = num - 1;
    while (d & 1 == 0) {
        s++;
        d >>= 1;
    }    
    // cout << "s" << s << "d" << d << "n" << num << endl;

    int x, k = 0;
    for (long long a = MILLER_PRIMES[miller_index][0]; k < MILLER_NUM_PRIMES[miller_index]; a = MILLER_PRIMES[miller_index][++k]) {
        x = mod_pow(a, d, num);
        if (x == 1 | x == num - 1) continue;
        for (int i = 0; i < s - 1; i++) {
            x = mod_pow(x, 2, num);
            if (x == num - 1) continue;
        }
        return false;
    }
    return true;

}


// #define g(val) ((val) * (val) + 1)
long long g(long long val) {
    return (val) * (val) + 1;
}
inline long long pollard_rho(long long num) {
    long long x = 2;
    long long y = 2;
    long long d = 1;
    while (d == 1) {
        x = g(x) % num;
        y = g(y) % num;
        y = g(y) % num;
        d = gcd(abs(x - y), num);
    }
    return d;
}

// https://web.archive.org/web/20160304185017/http://maths-people.anu.edu.au/~brent/pd/rpb051i.pdf
// https://cp-algorithms.com/algebra/factorization.html#implementation_1

inline long long mult(long long a, long long b, long long mod) {
    long long result = 0;
    while (b) {
        if (b & 1)
            result = (result + a) % mod;
        a = (a + a) % mod;
        b >>= 1;
    }
    return result;
}

inline long long g2(long long val, long long mod) {
    return (mult(val, val, mod) + 1) % mod;
}
// try to understand this code
// same time complexity 
long long brent(long long num) {
    long long x = 2;
    long long G = 1; // divisor
    long long q = 1;
    long long xs, y, k;

    int m = 128;
    int r = 1;
    while (G == 1) {
        y = x;
        for (int i = 1; i < r; i++) {
            // cout <<" fuack" << x;
            x = g2(x, num);
        }
        k = 0;
        while (k < r && G == 1) {
            xs = x;
            for (int i = 0; i < m && i < r - k; i++) {
                x = g2(x, num);
                q = mult(q, abs(y-x), num);
            }
            G = gcd(q, num);
            k += m;
        }
        r <<= 1;
    }
    // cout << "buack";
    if (G == num) {
        do {
            xs = g2(xs, num);
            G = gcd(abs(xs - y), num);
        } while (G == 1);
    }
    return G;
}

#define __ADD_PRIME_(inc) if (num == 1) return; while (num % inc == 0) {append_factor(inc); num /= inc;}
#define __ADD_PRIME(inc) if (num == 1) return; if (num % (i + inc) == 0) {append_factor(i + inc); num /= (i + inc);}
inline void factor_prime(long long num) {
    if (num == 1) return;
    long long num_sqrt = sqrt(num) + 1;
    while (num % 2 == 0) {append_factor(2); num /= 2;}
    while (num % 3 == 0) {append_factor(3); num /= 3;}
    while (num % 5 == 0) {append_factor(5); num /= 5;}
    while (num % 7 == 0) {append_factor(7); num /= 7;}
    PRIME_CHECKS_(__ADD_PRIME_)
    for (int i = 210; i < num_sqrt; i += 210) { 
        PRIME_CHECKS(__ADD_PRIME)
    }
    if (num != 1) append_factor(num);
}


inline void _find_factors(long long num) {
    // cout << "wah" << endl;
    if (num == 1) return;
    // cout << "num" << num << endl;
    // cout << "isprime" << is_prime(num) << is_prime(2719) << endl;
    if (is_prime(num)) {append_factor(num); return;}
    // cout << "hai" << num;
    // int factor = brent(num);
    int factor = lenstra(num);
    cout << factor << endl;
    if (factor == num || factor < 1) factor_prime(num);
    else {
        _find_factors(num/factor);
        _find_factors(factor);
    }
    // cout << factor << endl;
}

inline void find_factors(long long num) {
    // factor_prime(num);
    // return;
    // cout << "wahhh" << endl;

    if (num % 2 == 0) {
        // cout << "wah2";
        append_factor(2);
        find_factors(num/2);
    } else if (num % 3 == 0) {
        // cout << "wah3";
        append_factor(3);
        find_factors(num/3);
    } else if (num % 5 == 0) {
        // cout << "wah5";
        append_factor(5);
        find_factors(num/5);
    } else if (num % 7 == 0) {
        // cout << "wah7";
        append_factor(7);
        find_factors(num/7);
    } else {
        _find_factors(num);
    }
}

inline void print_factors(long long num) {
    // sort(factors, factors + num_factors);
    cout << num << "=";
    for (int i = 0; i < num_factors - 1; i++) {
        cout << factors[i] << "*";
    }
    cout << factors[num_factors - 1] << endl;
}



int main(int argc, char *argv[]) {

    long long num;
    long long from, to;
    // from = atoll(argv[1]);
    // to = atoll(argv[2]);
    from = 576460752303423571;
    to = 576460752303425489;
    for (num = from; num <= to; num++) {
        num_factors = 0;
        find_factors(num);
        print_factors(num);
    }

    // cout << "Enter a number to factorize: ";
    // cin >> num;

    // print_factors();
    // cout << pollard_rho(num);
    // find_factors(num);
    // for (long long num = 11232332; num < 11233332; num++)
        // cout << mult(102 * num, 152 * num, 103) << endl;
        // cout << mod_pow(103, num, 31) << endl;
        // cout << ((is_prime(num)) ? 1 : 0);
    // cout << "done";
    // for (int i = 0; i < 100; i++) {
    //     // cout << is_prime(576460752303423487);
    // }
    // cout << is_prime(2719);
    // find_factors(1320917390);
    // cout << "num factors : " << num_factors << endl;
    // print_factors(1320917390);

    return 0;
}

